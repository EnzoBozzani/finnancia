// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum FinanceType {
  EXPENSE
  PROFIT
}

enum MessageRole {
  USER
  MODEL
}

enum Tier {
  FREE
  BASIC
  PREMIUM
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  totalAmount   Float   @default(0)
  isInitialAmountSet Boolean @default(false)
  hasUsedFreeReport Boolean @default(false)

  accounts      Account[]
  sheets        Sheet[]
  messages      Message[]
  categories    Category[]
  helpMessages  HelpMessage[]
}

model Category {
  id String @id @default(cuid())
  name String 
  color String @default("transparent")
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  finances Finance[]
}

model Message {
  id        String   @id @default(cuid())
  role      MessageRole
  body      String

  userId    String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model HelpMessage {
  id        String   @id @default(cuid())
  body      String
  userEmail String
  createdAt DateTime @default(now())

  user User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Finance {
	id  String @id @default(cuid())
	title String
	amount Float
	date String
	sheetId String
  order Int
  type FinanceType
  categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())

  sheet Sheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Sheet {
	id  String @id @default(cuid())
	name String
	userId String
	totalAmount Float
  order Int
  financesCount Int @default(0)

  finances Finance[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SheetLimit {
  id        String @id @default(uuid())
  sheetId     String @unique
  count     Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id                     String @id @default(uuid())
  userId                 String @unique
  
  stripeCustomerId       String @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String @unique @map(name: "stripe_subscription_id")
  stripePriceId          String @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime @map(name: "stripe_current_period_end")
}

